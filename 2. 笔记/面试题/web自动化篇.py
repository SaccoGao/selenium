import selenium.webdriver.remote.switch_to
from selenium import webdriver

'''
1. 你的自动化是如何落地的，遇到了什么难点
问题1：UI自动化方面，我是选择了Python和selenium作为自动化的工具，选择了核心正向的用例，转化为自动化测试；我在设计整个自动化框架的时候，是通过PO模
型的思想取设计的：
① 先我先定义一个util层，这里面我会放一些比较公用的模块，比如说获取元素、破解验证码、读取配置文件等
② 然后我定义了一个page层，这一层不同的页面就分不同的模块，比如登录页面就创建一个login_page，这层代码的作用是，调用util层封装的获取元素的方法，获
取具体页面的元素
③ 然后我会顶一个一个handle层，这一层也会根据页面分模块，用于操作page层获取到的元素
④ 再然后是business层，会把handel层对每个元素的操作，根据用例进行组合，形成一连串的操作，并且判断操作的结果进行返回
⑤ 最后是case层，用于判断business层返回的结果，决定用例是否通过
以实际用例举例，一个成功登录的用例，要用到的登录页面元素有用户名、密码、验证码、登录按钮，首先用page层获取四个元素，然后到handel层分别封装四个元素
操作，比如用户名就写一个send_username方法，其三个也是类似；然后在business层封装方法，按不同的顺序调用handle层方法，就形成一连串的操作，并且判断
预期结果是否出现，如果出现就返回Ture；最后在case层调用handle封装的方法，判断是否返回Ture，决定用例是否通过，这样就形成基本的用例执行，然后再加上
一些容错处理、错误截图、记录操作日志、测试报告等；
问题2：我遇到过的难点的话，有一个场景是这样的，就是一个数据表，它是通过你下滑，当你下滑到页面最底部的时候，就会加载下一页的数据，加载到最后一页会展示
具体的数据条数，当时用例是要看每页的数据和最后的条数，当时刚开始是没想到怎么去搞的，后面是通过循环+js，每次下滑就find_elements返回列表统计本页数据
数，最后滑动到最底部定位总数居条数是否出现，这样解决了这条用例执行；

2. 遇到过哪些比较难定位的元素，你是如何定位的

3. 验证码问题是如何解决的
我是通过调用外部的api，就是百度有识别图片文字的api，我把验证码图片截下来保存，再通过外部api返回，进行验证码输入，后面其实有遇到过问题，验证码图片上
会有干扰线条，导致识别的不准确，所以在涉及到有验证码相关的，我都会循环这条用例，如果失败了，就循环，我一般都只循环3次，基本上都能一次过，很少有能循环
到三次的；其实最好就是写个万能验证码咯；

4. 日期控件如何定位
① 日期控件有些是可以直接输入的，这种使用send_keys就好
② 另外有的日期控件，他的前端代码有readonly属性，这种可以用js，去掉这个属性，之后也能直接输入

5. web弹出提示框处理
① 普通的页面弹窗，直接定位，进行操作就行；
② 第二种，弹窗可能位于另一个iframe，这个时候就要用switchTo().frame跳进这个框架进行操作，操作完之后在退出
③ 通过switch_to.alert，然后有accept、dismiss、send_keys

6. 如何切换窗口
通过句柄，driver.window_handles获取句柄列表，然后switch_to.window()

7. PO模型是什么
是一种设计模式，在PO模式的设计下，每个页面都有一个对应的page类，每个page类维护该页面的元素集合和操作

8. PO模型的优势
业务和页面元素分离，使代码更清晰；
页面对象和用例分离，更好复用；

9. 下拉框如何处理
Selenim有专门的类，Select，使用这个方法对下拉框进行处理，可以下拉框内的text、index、value

10. 上传下载文件如何操作
上传文件：
① 前端带有input属性，可以使用send_keys，输入文件地址进行上传
② 前端不带input属性，可以结合键盘的操作（使用PyKeyboard库）进行上传，具体步骤大概是，点击上传按钮，弹出文件地址选择窗口，此时焦点会定位在选择窗口
的输入框中，输入文件的地址，然后模拟点击回车就可以上传

下载文件：
① 第一种方法，同样是可以结合键盘操作
② 第二种方法，可以给浏览器配置默认的启动参数，配置好默认下载地址，同时去掉下载文件的二次确认弹窗，然后直接点击下载即可
'''
